const cheerio = require('cheerio');

const handle = (line) => {
  if (line.startsWith('<h2') && line.includes('</h2')) {
    const $ = cheerio.load(line);
    const h2 = $('h2');

    let textContainer = h2;
    const first = h2.children().first()[0];
    if (first?.type === 'tag' && first?.name === 'a') {
      textContainer = $(first);
    }

    // contents() not children(), because contents() also returns text nodes
    const children = [...textContainer.contents()];
    const text = children.map(el => el.type === 'tag' && el.name === 'code' ? '`' + $(el).text() + '`' : $(el).text()).join('');
    return `## ${text}` + (h2.attr('id') ? ` {#${h2.attr('id')}}` : '');
  }
  if (line.startsWith('<h3') && line.includes('</h3')) {
    const $ = cheerio.load(line);
    const h3 = $('h3');

    let textContainer = h3;
    const first = h3.children().first()[0];
    if (first?.type === 'tag' && first?.name === 'a') {
      textContainer = $(first);
    }

    // contents() not children(), because contents() also returns text nodes
    const children = [...textContainer.contents()];
    const text = children.map(el => el.type === 'tag' && el.name === 'code' ? '`' + $(el).text() + '`' : $(el).text()).join('');

    return `### ${text}` + (h3.attr('id') ? ` {#${h3.attr('id')}}` : '');
  }

  return line;
};

const str = require('fs').readFileSync(process.argv[2]).toString('utf8');

const lines = str.split('\n');

console.log(lines.map(line => handle(line)).join('\n'));
